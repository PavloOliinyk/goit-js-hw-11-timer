{"version":3,"sources":["js/countdown-timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timerRef","document","querySelector","timerId","makeMarkup","innerHTML","Refs","days","hours","mins","secs","startTimer","setInterval","updateCountdownTime","pad","value","String","padStart","stopTimer","clearInterval","textContent","time","Date","now","Math","floor","timer"],"mappings":";AAAA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,SAAWC,SAASC,cAAc,KAAKJ,UACvCK,KAAAA,QAAU,KAGjBC,aA6BOJ,KAAAA,SAASK,UA5BE,ijBA+BdC,WACI,MAAA,SAAEN,GAAa,KAEd,MAAA,CACLO,KAAMP,EAASE,cAAc,uBAC7BM,MAAOR,EAASE,cAAc,wBAC9BO,KAAMT,EAASE,cAAc,uBAC7BQ,KAAMV,EAASE,cAAc,wBAIjCS,aACOP,KAAAA,aAEAD,KAAAA,QAAUS,YAAY,KACpBC,KAAAA,uBACJ,KAGLC,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCC,YACEC,cAAc,KAAKhB,SAEdG,KAAAA,KAAKC,KAAKa,YAAc,KACxBd,KAAAA,KAAKE,MAAMY,YAAc,KACzBd,KAAAA,KAAKG,KAAKW,YAAc,KACxBd,KAAAA,KAAKI,KAAKU,YAAc,KAG/BP,sBACQQ,MAAAA,EAAO,KAAKtB,WAAauB,KAAKC,MAC9BhB,EAAO,KAAKO,IAAIU,KAAKC,MAAMJ,EAAQ,QACnCb,EAAQ,KAAKM,IAAIU,KAAKC,MAAOJ,EAAQ,MAAyB,OAC9DZ,EAAO,KAAKK,IAAIU,KAAKC,MAAOJ,EAAQ,KAAoB,MACxDX,EAAO,KAAKI,IAAIU,KAAKC,MAAOJ,EAAQ,IAAc,MAEnDf,KAAAA,KAAKC,KAAKa,YAAcb,EACxBD,KAAAA,KAAKE,MAAMY,YAAcZ,EACzBF,KAAAA,KAAKG,KAAKW,YAAcX,EACxBH,KAAAA,KAAKI,KAAKU,YAAcV,EAEzBW,GAAQ,GACLH,KAAAA,aAKX,MAAMQ,EAAQ,IAAI9B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIuB,KAAK,kBAGvBI,EAAMf;;AC/FN,aAAA,QAAA","file":"src.7a9ee47e.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.timerRef = document.querySelector(this.selector);\n    this.timerId = null;\n  }\n\n  makeMarkup() {\n    const markUp = `<div class='field'>\n    <span class='value' data-value='days'>\n      11\n    </span>\n    <span class='label'>Days</span>\n  </div>\n\n  <div class='field'>\n    <span class='value' data-value='hours'>\n      11\n    </span>\n    <span class='label'>Hours</span>\n  </div>\n\n  <div class='field'>\n    <span class='value' data-value='mins'>\n      11\n    </span>\n    <span class='label'>Minutes</span>\n  </div>\n\n  <div class='field'>\n    <span class='value' data-value='secs'>\n      11\n    </span>\n    <span class='label'>Seconds</span>\n  </div>`;\n\n    this.timerRef.innerHTML = markUp;\n  }\n\n  get Refs() {\n    const { timerRef } = this;\n\n    return {\n      days: timerRef.querySelector('[data-value=\"days\"]'),\n      hours: timerRef.querySelector('[data-value=\"hours\"]'),\n      mins: timerRef.querySelector('[data-value=\"mins\"]'),\n      secs: timerRef.querySelector('[data-value=\"secs\"]'),\n    };\n  }\n\n  startTimer() {\n    this.makeMarkup();\n\n    this.timerId = setInterval(() => {\n      this.updateCountdownTime();\n    }, 1000);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  stopTimer() {\n    clearInterval(this.timerId);\n\n    this.Refs.days.textContent = '00';\n    this.Refs.hours.textContent = '00';\n    this.Refs.mins.textContent = '00';\n    this.Refs.secs.textContent = '00';\n  }\n\n  updateCountdownTime() {\n    const time = this.targetDate - Date.now();\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    this.Refs.days.textContent = days;\n    this.Refs.hours.textContent = hours;\n    this.Refs.mins.textContent = mins;\n    this.Refs.secs.textContent = secs;\n\n    if (time <= 0) {\n      this.stopTimer();\n    }\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Aug 08, 2021'),\n});\n\ntimer.startTimer();\n","import './js/countdown-timer';\n"]}